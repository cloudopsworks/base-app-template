##
# (c) 2023 - Cloud Ops Works LLC - https://cloudops.works/
#            On GitHub: https://github.com/cloudopsworks
#            Distributed Under Apache v2.0 License
#
name: CD Data Workflow Template

on:
  workflow_call:
    secrets:
      token:
          required: true
    outputs:
      environment:
        value: ${{ jobs.data.outputs.environment }}
      isRelease:
        value: ${{ jobs.data.outputs.isRelease }}
      isPreRelease:
        value: ${{ jobs.data.outputs.isPreRelease }}
      targetName:
        value: ${{ jobs.data.outputs.targetName }}
      isEnabled:
        value: ${{ jobs.data.outputs.isEnabled }}
      hasQualifier:
        value: ${{ jobs.data.outputs.hasQualifier }}
      deploymentName:
        value: ${{ jobs.data.outputs.deploymentName }}

jobs:
  data:
    outputs:
      environment: ${{ steps.workspace.outputs.workspace }}
      isRelease: ${{ steps.workspace.outputs.isRelease }}
      isPreRelease: ${{ steps.workspace.outputs.isPreRelease }}
      targetName: ${{ steps.workspace.outputs.targetName }}
      isEnabled: ${{ steps.workspace.outputs.isEnabled }}
      hasQualifier: ${{ steps.workspace.outputs.hasQualifier }}
      deploymentName: ${{ steps.workspace.outputs.deployment }}
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.token }}

      # Get the deployments configuration
      - name: Get the deployments configuration
        id: deploy_conf
        uses: mikefarah/yq@master
        with:
          cmd: yq -o=json -I=0 '.cd.deployments' cloudopsworks-ci.yaml

      # Set the appropriate workspace from what is configured from the deploy_conf step
      # Result is stored as JSON with the format found on the cd.deployments section on cloudopsworks-ci.yaml
      - name: Set the appropriate workspace
        id: workspace
        uses: actions/github-script@v6
        with:
          script: |
            const deployments = JSON.parse('${{ steps.deploy_conf.outputs.result }}');
            const branch = '${{ github.ref_name }}';

            var environment = '';
            var isRelease = false;
            var isPreRelease = false;
            var targetName = '';
            var isEnabled = true;
            var hasQualifier = false;
            var deploymentName = '';
            if ( branch.startsWith('support') ) {
              const oneMatch = deployments.support.find( ({ match }) => branch.match(new RegExp('support/'+match,'g')) );
              environment = oneMatch.env;
              targetName = oneMatch.targetName;
            } else if ( branch.startsWith('release') ) {
              isPreRelease = true;
              isEnabled = (deployments.test['enabled'] == null ? true : (deployments.test['enabled'] === 'true'));
              environment = deployments.test.env;
              if ( 'targetName' in deployments.test ) {
                targetName = deployments.test.targetName;
              }
              deploymentName = `test/${environment}`; 
            } else if ( branch === 'develop' ) {
              isEnabled = (deployments.develop['enabled'] == null ? true : (deployments.develop['enabled'] === 'true'));
              environment = deployments.develop.env;
              if ( 'targetName' in deployments.develop ) {
                targetName = deployments.develop.targetName;
              }
              deploymentName = `develop/${environment}`;
            } else {
              // This semver structure is obtained as per specification https://semver.org/ & https://regex101.com/r/vkijKf/1/
              semver = branch.match(/^v(?<major>0|[1-9]\d*)\.(?<minor>0|[1-9]\d*)\.(?<patch>0|[1-9]\d*)(?:-(?<prerelease>(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+(?<buildmetadata>[0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?/);
              if ( semver != null ) {
                const pre = semver['groups']['prerelease'];
                const buildmeta = semver['groups']['buildmetadata'];
                // buildmeta format is deploy-XXXX.yyy.zzz
                // the metasuffix should be the deploy- prefix
                if ( pre != null && buildmeta != null) {
                  const metasuffix = buildmeta.match(/deploy-(?<data>.*)/);
                  isEnabled = (deployments.prerelease['enabled'] == null ? true : (deployments.prerelease['enabled'] === 'true'));
                  isPreRelease = true;
                  hasQualifier = true;
                  environment = deployments.prerelease.targets[metasuffix.groups.data].env;
                  if ( 'targetName' in deployments.prerelease.targets[metasuffix.groups.data] ) {
                    targetName = deployments.prerelease.targets[metasuffix.groups.data].targetName;
                  }
                  deploymentName = `prerelease/${buildmeta}/${environment}`;
                } else if ( pre != null ) {
                  isEnabled = (deployments.prerelease['enabled'] == null ? true : (deployments.prerelease['enabled'] === 'true'));
                  // Regular expression to match following semver pattern: v1.0.2-alpha.10-uoiretu834u
                  isPreRelease = true;
                  environment = deployments.prerelease.env;
                  if ( 'targetName' in deployments.prerelease ) {
                    targetName = deployments.prerelease.targetName;
                  }
                  deploymentName = `prerelease/${environment}`;
                } else if ( buildmeta != null ) {
                  const metasuffix = buildmeta.match(/deploy-(?<data>.*)/);
                  isRelease = true;
                  hasQualifier = true;
                  environment = deployments.release.targets[metasuffix.groups.data].env;
                  if ( 'targetName' in deployments.release.targets[metasuffix.groups.data] ) {
                    targetName = deployments.release.targets[metasuffix.groups.data].targetName;
                  }
                  deploymentName = `release/${buildmeta}/${environment}`;
                } else {
                  isRelease = true;
                  environment = deployments.release.env;
                  if ( 'targetName' in deployments.release ) {
                    targetName = deployments.release.targetName;
                  }
                  deploymentName = `release/${environment}`;
                }
              } else if ( branch === 'master' || branch === 'main' ) {
                isRelease = true;
                environment = deployments.release.env;
                if ( 'targetName' in deployments.release ) {
                  targetName = deployments.release.targetName;
                }
                deploymentName = `release/${environment}`;
              } else {
                core.setFailed('Branch not supported');
              }
            }
            
            const outputV = { 
              environment: environment, 
              isPreRelease: isPreRelease, 
              isRelease: isRelease,
              targetName: targetName,
              isEnabled: isEnabled,
              hasQualifier: hasQualifier,
              deploymentName: deploymentName
            }; 
            core.setOutput('workspace', environment);
            core.setOutput('isRelease', isRelease);
            core.setOutput('isPreRelease', isPreRelease);
            core.setOutput('targetName', targetName);
            core.setOutput('isEnabled', isEnabled);
            core.setOutput('hasQualifier', hasQualifier);
            core.setOutput('deploymentName', deploymentName);

            return outputV;
